primitives non primitives


1. NOn Primitive - many (String, ...)
  -String - a value that represented in ""



2. primitive data types
  numeric:
         Whole numbers (1,2,3)
             byte        (8 byte) (-128 to 127)
             short       (16 byte) (-32768 to 32768)
             int         (32 byte)
             long        (64 byte)

         decimals (1,34 3,34)

             Float - put F at the end   (32 byte)
             double   11.22, 88.44      (64 byte)


         1 character (&,F,M)
               Char

         True/false
               Boolean
              


ArithmeticOperators


package com.syntax.Class2082122;

public class ArithmeticOperators {

	public static void main(String[] args) {
		
		
		//+, -, *, /, %
		
		        int a=90;
				int b= 100;
				
				System.out.println(a+b);
				System.out.println(a-b);
				System.out.println(a*b);
				System.out.println(a/b);
				
				int c=10;
				int d=3;
				
				int sum=c+d;
				int sub=c-d;
				int remainder=c%d;//10%3=1
				int div=c/d; //10/3=3
				
				System.out.println(sum);
				System.out.println(sub);
				System.out.println(remainder);
				System.out.println(div);
				
				
				double num1=10;
				double num2=3;
				
				System.out.println(num1/num2);
				
				Float numb1=10.0f;
				float numb2=3.0f;
				
				System.out.println(numb1/numb2);
				System.out.println(numb1%numb2);
             

Type Casting(primitive data types);

  type casting is converting one data type to another one.
  
Implicit/widening/automatic type casting;

  when Java converts the data types automatically for us. It only happens when we assign a smaller data type to a larger data type, because
  ther is no data loss in this Conversion.

Explicit/narrowing/Manual type casting
  When we convert a larger data type to a smaller data type it is called Explicit/narrowing/Manual. it doesn't happen automatically.
  we have to do it explicitly Manually.

Why we should learn type casting?
  when we write code in our real life most of the time we use the code from others to save time and we might also need to convert the
  types to make our code compatible with their code.
  
What is the syntax for type casting?
  we use () and inside the () we write the destination data type for example if we want to convert a long to an int this is how we can do it.
  long var1=250;
  int var2=(int)var1; //its Explicit/narrowing/Manual
  double var3=var2;   //Implicit/widening/automatic   
  
  float f=250.5f;
  double d=f;    //Implicit/widening/automatic 
  
====================================================================================================================
  if else conditions
     if else conditions help us write code can take the decision based on data.
Why we should learn about if else?
     Because when we are solving a real life problem like testing a website our programs need to make a lot of decision
     IF (the given username and password matches) {go to home page} ELSE {give user a warning}
What is the syntax for If else conditions
     boolean is Hungry=true;
     
     if (isHungry) {System.out.println("Please Eat something");}
     else{System.out.println("Lets build same java programs");}    
     
========================================================================================================================

Nested if Conditions:
   
   
   
======================================================================================================================== 
Logical Operators     
    
    
   Assignment operator: =
   Arithmetic: +,-,*,/,%
   Relational: >,>=,<=,==,!=
   
   Logical: &&, ||, !
   
   Logical AND &&
   
   true && true   -->True
   True && false  -->False
   False&& true   -->False
   false && false -->False
   
   
   Logical OR ||
   
   true  || true   --> TRUE
   True  || false  --> TRUE
   False || true   --> TRUE
   false || false --> False
   
   
   Logical NOT !
   
   false ! --> true
   true  ! --> false
   
   
   Switch case - statement executes one statement from multiple values/conditions.
      switch case is values based it knows the value-> jump into matching case
      
   LIMITATIONS of Switch case
      cannot use logical operators
      cannot use relational operators
      cannot work with boolean values
      cannot work with float/double and long   
   
   SYNTAX
   
   switch (variable){
     case value1:
           code A;
           break;
     case value2:
           code B;
           break;
     default:
           code C;
           break;            
   }
   limitations:
       data type : CANNOT work with double
       
       boolean 
       operator CANNOTÐ¸  
       
 **************************** Java Class 8

Loops in Java:

while
do while
for
enhanced for loop/for each loop/ advanced for loop

for loop - when we know number of repetitions/ iterations in advance

for(initialization; condition; increment/decrement) {
	
	code to repeat;
}

while loop and do while -> if we dont know number of repetitions

while vs do while

while checks condition first-> then executes code
do while executes code -> then check condition

while(boolean condition) {
	code to repeat;
}

do {
	code to repeat;
}while(boolean condition);

---------------------------------

nested loops - loop inside another loop


for (int i=1; i<3; i++) { --> outer loop
	
	System.out.println("Hello");


	for(int j=1; j<=3; j++){ --> nested loop

		System.out.println("Bye");

	}
}  
   
   
 ****************************   Java Class 9 
      
   
   break and continue;

break - break/exist loop block
continue - skips current execution/iteration

nested loop - loop inside another loop

	for(int i=1; i<4; i++){
		
		for(int j=0; j<=2; j++) {

				System.out.println("Hello");
				break;
		}

		System.out.println("Bye");
		break;
	}
   
   
     Arrays in Java - 
   
   array - container object that holds multiple values of the same type

how to create an use an array?

int[] nums=new int[4];
nums[0]=10;
nums[1]=100;
nums[2]=110;

System.out.println(nums[1]); //0
System.out.println(nums[4]); // RE:ArrayIndexOutOfBoundException:4

nums.length -> tells how many elements

//how to get all elements from an array?

for(int i=0; i<num.length; i++) {
	
	System.out.println(nums[i]);
}
------------------------------------------

Advanced for loop works only when we work with array or collection
it loop only 1 direction

for(int num: nums){
	
	System.out.println(num);
	
}
**************************** java class 10
Types of arrays - 2d, 3d

2D array - array of arrays


enhanced for loop syntax


for(dataType variableName:nameOfArray) {
	
	SOPln(variableName);
}
   
   
   
   
   
   
  **************************** Java class 11 --Object oriented programming:

What is an Object?
  everything around us is an object for example keyboard,mouse,glass,etc.
  Objects can be defined based on how they look and how they behave.Objects in computer programming are also
  very similar.they have state(which helps us define how that object looks like) and behaviours (what that object does)


  is just a way of writing programs.
why we should learn OOP?
   1)it simplify the development of large programs.
   2)it will also help us maintain and modify the existing code
   3)it helps use write more secure code
   4)it helps us avoid duplicate code.

 4 main pillars of OOP
   1)Classes and objects.
   2)Inheritance.
   3)Polymorphism
   4)Abstraction.
   5)Encapsulation.

Classes and Objects?
     A class is a template/Blueprint from which we create the objects.
     An object in programming is very similar to the objects that we have in real life.
        
Object:
   Objects have states that defines how the object looks like.we define the states with the help
   of Attributes/properties/fields inside a class.
   TObjects can also have behaviors(Things that objects can do).We use methods to define these behaviors.   
   
   
   
   
   
   
   
   
   
   